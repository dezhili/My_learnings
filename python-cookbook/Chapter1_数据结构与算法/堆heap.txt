堆的基本概念及其操作
它是利用完全二叉树的结构来维护一组数据，然后进行相关操作，一般的操作进行一次的时间复杂度在O(1)-O(logn)之间。
完全二叉树 -- 若设二叉树的深度为h， 除第h层外，其它各层(1- h-1)的节点数都达到最大个数，第h层所有的节点都连续集中在最左边，这就是二叉树。

堆还分为两种类型: 大根堆(保证根节点是所有数据中最大) 、 小根堆(保证根节点是所有数据中最小)而且尽量让小的元素在较上方的节点。
注意: 堆内的元素并不一定按数组下标顺序来排序的。

数据杂乱无章，如何去维护?
堆的几个基本操作
shift_up    上浮
shift_down  下沉
push        插入
pop         弹出
top         取顶
heap_sort   堆排序

以小根堆为例
shift_up : 从当前节点开始，和它的父亲节点比较，若是比父亲节点来的小，就交换，然后将当前询问的节点下标更新为原父亲节点下标；否则退出。
shift_down: 让当前节点的左右儿子作比较，哪个比较小就和它交换，并更新询问节点的下标为被交换的儿子节点下标，否则退出。
push: 每次插入的时候，我们都往最后一个插入，然后使它上浮。
pop: 让根节点元素和尾节点进行交换，然后让现在的根元素下沉就可以了!
top: 根节点数组下标必定是1，返回堆[1]就ok了。

更加方便的堆排序算法: 开一个新的数组，每次取堆顶元素放进去，然后弹掉堆顶就ok了。

最短路径算法--Dijkstra，需要用到堆来优化





堆常用来实现优先队列，在这种队列中，待删除的元素为优先级最高(最低)的那个。在任何时候，任意优先元素都是可以插入到队列中去的。




