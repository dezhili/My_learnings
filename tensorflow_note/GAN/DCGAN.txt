1. 将pooling层 用 convolutions替代(对于判别模型: 容许网络学习自己的空间下采样，如何提取特征进行判别,加入stride的卷积替代池化) (对于生成模型: 容许它学习自己的空间上采样-反卷积 从向量到图像从4x4x200 --> 8x8x100 上采样 让生成模型自己学习什么样的权重参数适合做上采样的操作) 没有池化层，通过strides进行上采样和下采样。
2. 在generator 和 discriminator 上都使用 batchnorm(在不同阶段做归一化)(除了生成器模型的输出层和判别器模型的输入层)经过卷积但未经过relu
解决初始化差的问题
帮助梯度传播到每一层
防止generator把所有的样本都收敛到同一个点。
3. 在CNN中移除全连接层(都使用卷积层)
4. 在generator的除了输出层外的所有层使用ReLU， 输出层采用tanh
5. 在discriminator的所有层上使用 LeakyReLU

G(z)(从100z 到 64x64x3)
1. Project and reshape: 100z(100维的初始噪音向量)(通过一个全连接层--> 16384 --reshape -->变成适合卷积的形式4x4x1024)
2. deconv(反卷积) 4x4x1024(C1) --> 8x8x512(C2) --> 16x16x256(C3) --> 32x32x128(C4) --> 64x64x3 (deconv 5x5 stride2)

D
64x64x3 --> 32x32x64 --> 16x16x128 --> 8x8x256 --> 4x4x512 -->全连接--> 1(最后判别是1 还是 0)(conv 5x5)












